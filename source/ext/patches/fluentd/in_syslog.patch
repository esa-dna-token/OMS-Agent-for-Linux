--- ../source/ext/fluentd/lib/fluent/plugin/in_syslog.rb	2019-06-01 16:45:30.033349219 -0700
+++ ../source/ext/fluentd/lib/fluent/plugin/in_syslog.rb.new	2019-06-01 16:44:13.524125631 -0700
@@ -70,21 +70,25 @@
       require 'fluent/plugin/socket_util'
     end
 
+    desc 'The path to your Unix Domain Socket.'
+    config_param :path, :string, default: nil
     desc 'The port to listen to.'
     config_param :port, :integer, default: 5140
     desc 'The bind address to listen to.'
     config_param :bind, :string, default: '0.0.0.0'
     desc 'The prefix of the tag. The tag itself is generated by the tag prefix, facility level, and priority.'
     config_param :tag, :string
-    desc 'The transport protocol used to receive logs.(udp, tcp)'
+    desc 'The transport protocol used to receive logs.(udp, tcp, unix)'
     config_param :protocol_type, default: :udp do |val|
       case val.downcase
       when 'tcp'
         :tcp
       when 'udp'
         :udp
+      when 'unix'
+        :unix
       else
-        raise ConfigError, "syslog input protocol type should be 'tcp' or 'udp'"
+        raise ConfigError, "syslog input protocol type should be 'tcp', 'udp' or 'unix'"
       end
     end
     desc 'If true, add source host to event record.'
@@ -110,6 +114,8 @@
     # 13 is the default value of rsyslog and syslog-ng
     desc 'The default PRI value (0 - 191 are available)'
     config_param :default_priority, :integer, default: 13
+    desc 'The delimiter value "\n"'
+    config_param :delimiter, :string, default: "\n" # syslog family add "\n" to each message
 
     def configure(conf)
       super
@@ -226,7 +232,7 @@
         end
 
         ## from receive_data_default
-        pri = record.delete('pri'.freeze) unless pri
+        pri = record.delete('pri') unless pri
 
         facility = FACILITY_MAP[pri >> 3]
         priority = PRIORITY_MAP[pri & 0b111]
@@ -244,14 +250,23 @@
     private
 
     def listen(callback)
-      log.info "listening syslog socket on #{@bind}:#{@port} with #{@protocol_type}"
+
       if @protocol_type == :udp
+        log.info "listening syslog socket on #{@bind}:#{@port} with #{@protocol_type}"
         @usock = SocketUtil.create_udp_socket(@bind)
         @usock.bind(@bind, @port)
         SocketUtil::UdpHandler.new(@usock, log, @message_length_limit, callback, @resolve_hostname)
-      else
+      elsif @protocol_type == :tcp
+        log.info "listening syslog socket on #{@bind}:#{@port} with #{@protocol_type}"
         # syslog family add "\n" to each message and this seems only way to split messages in tcp stream
-        Coolio::TCPServer.new(@bind, @port, SocketUtil::TcpHandler, log, "\n", callback, @resolve_hostname)
+        Coolio::TCPServer.new(@bind, @port, SocketUtil::TcpHandler, log, @delimiter, callback, @resolve_hostname)
+      elsif @protocol_type == :unix
+        if File.exist?(@path)
+          File.unlink(@path)
+        end
+        FileUtils.mkdir_p File.dirname(@path)
+        log.info "listening syslog unix socket #{@path}"
+        Coolio::UNIXServer.new(@path, UnixHandler, log, @delimiter, callback)
       end
     end
 
@@ -260,5 +275,39 @@
     rescue => e
       log.error "syslog failed to emit", error: e.to_s, error_class: e.class.to_s, tag: tag, record: Yajl.dump(record)
     end
+
+    class UnixHandler < Coolio::Socket
+      def initialize(io, log, delimiter, callback)
+        super(io)
+        @delimiter = delimiter
+        @callback = callback
+        @log = log
+        @buffer = "".force_encoding('ASCII-8BIT')
+      end
+
+      def on_connect
+        @log.trace { "Connected syslog socket object_id=#{self.object_id}" }
+      end
+
+      def on_read(data)
+        @buffer << data
+        pos = 0
+
+        while i = @buffer.index(@delimiter, pos)
+          msg = @buffer[pos...i]
+          @callback.call(msg, @addr)
+          pos = i + @delimiter.length
+        end
+        @buffer.slice!(0, pos) if pos > 0
+      rescue => e
+        @log.error "unexpected error", error: e, error_class: e.class
+        close
+      end
+
+      def on_close
+        @log.trace { "Closed syslog socket object_id=#{self.object_id}" }
+      end
+    end
+
   end
 end
